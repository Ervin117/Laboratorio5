
PreLab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000044c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  000004c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a1c  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000840  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000064b  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00001e68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000464  00000000  00000000  00001f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c4  00000000  00000000  000023f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000025b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  88:	0c 94 24 02 	jmp	0x448	; 0x448 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:

/****************************************/
// NON-Interrupt subroutines
void setup()
{
	cli(); 
  90:	f8 94       	cli
	CLKPR = (1<<CLKPCE);
  92:	e1 e6       	ldi	r30, 0x61	; 97
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 e8       	ldi	r24, 0x80	; 128
  98:	80 83       	st	Z, r24
	CLKPR = (1<<CLKPS2); //Frecuancia de CPU 1Mhz
  9a:	84 e0       	ldi	r24, 0x04	; 4
  9c:	80 83       	st	Z, r24
	PWM1A(no_invt, 64); 
  9e:	60 e4       	ldi	r22, 0x40	; 64
  a0:	70 e0       	ldi	r23, 0x00	; 0
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	0e 94 33 01 	call	0x266	; 0x266 <PWM1A>
	PWM2A(no_invt2, 64); 
  a8:	60 e4       	ldi	r22, 0x40	; 64
  aa:	70 e0       	ldi	r23, 0x00	; 0
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	0e 94 92 01 	call	0x324	; 0x324 <PWM2A>
	//PWM0A(no_invt, 64);
	
	DDRB |= (1<<PORTB5);
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<PORTB5);
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	8f 7d       	andi	r24, 0xDF	; 223
  bc:	85 b9       	out	0x05, r24	; 5
	
	TCCR0A &= ~((1 << WGM01) | (1 << WGM00));
  be:	84 b5       	in	r24, 0x24	; 36
  c0:	8c 7f       	andi	r24, 0xFC	; 252
  c2:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00); //| (1 << CS00); // Prescaler de 64
  c4:	85 b5       	in	r24, 0x25	; 37
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);
  ca:	ee e6       	ldi	r30, 0x6E	; 110
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	80 83       	st	Z, r24
	
	UCSR0B = 0;
  d4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	sei(); 
  d8:	78 94       	sei
  da:	08 95       	ret

000000dc <_ADC>:
}

void _ADC(void)
{
	ADMUX = 0;
  dc:	ec e7       	ldi	r30, 0x7C	; 124
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0) | (1<<ADLAR) | (1 << MUX0) |  (1 << MUX1) | (1<<MUX2); //
  e2:	80 81       	ld	r24, Z
  e4:	87 66       	ori	r24, 0x67	; 103
  e6:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  e8:	ea e7       	ldi	r30, 0x7A	; 122
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADPS1) | (1<<ADPS2) |  (1<<ADIE) | (1<<ADEN);
  ee:	80 81       	ld	r24, Z
  f0:	8e 68       	ori	r24, 0x8E	; 142
  f2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
  f4:	80 81       	ld	r24, Z
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	80 83       	st	Z, r24
  fa:	08 95       	ret

000000fc <main>:

/****************************************/
// Main Function
int main(void){
	
	setup(); 
  fc:	0e 94 48 00 	call	0x90	; 0x90 <setup>
	_ADC(); 
 100:	0e 94 6e 00 	call	0xdc	; 0xdc <_ADC>
	
	while (1)
	{
		updateDutyCycle1(duty);
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10c:	0e 94 8d 01 	call	0x31a	; 0x31a <updateDutyCycle1>
		updateDutyCycle2(duty2);
 110:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <duty2>
 114:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <updateDutyCycle2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	8f e9       	ldi	r24, 0x9F	; 159
 11a:	9f e0       	ldi	r25, 0x0F	; 15
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <main+0x20>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x26>
 122:	00 00       	nop
 124:	ef cf       	rjmp	.-34     	; 0x104 <main+0x8>

00000126 <__vector_21>:
	
}
/****************************************/
// Interrupt routines
ISR(ADC_vect)
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	2f 93       	push	r18
 132:	5f 93       	push	r21
 134:	6f 93       	push	r22
 136:	7f 93       	push	r23
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
 13c:	af 93       	push	r26
 13e:	bf 93       	push	r27
 140:	ef 93       	push	r30
 142:	ff 93       	push	r31
	uint8_t currentADC = ADMUX & 0x07;
 144:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 148:	97 70       	andi	r25, 0x07	; 7
	uint8_t temp = ADCH;
 14a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	if (currentADC == 7)
 14e:	97 30       	cpi	r25, 0x07	; 7
 150:	c1 f4       	brne	.+48     	; 0x182 <__vector_21+0x5c>
	{
		duty = 8 + (temp*(38-8)/255);
 152:	2e e1       	ldi	r18, 0x1E	; 30
 154:	82 9f       	mul	r24, r18
 156:	c0 01       	movw	r24, r0
 158:	11 24       	eor	r1, r1
 15a:	6f ef       	ldi	r22, 0xFF	; 255
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__divmodhi4>
 162:	68 5f       	subi	r22, 0xF8	; 248
 164:	7f 4f       	sbci	r23, 0xFF	; 255
 166:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
		ADMUX = 0;
 16e:	ec e7       	ldi	r30, 0x7C	; 124
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	10 82       	st	Z, r1
		ADMUX |= (1<<REFS0) | (1<<ADLAR); 
 174:	80 81       	ld	r24, Z
 176:	80 66       	ori	r24, 0x60	; 96
 178:	80 83       	st	Z, r24
		ADMUX |= (1 << MUX1) | (1<<MUX2); 
 17a:	80 81       	ld	r24, Z
 17c:	86 60       	ori	r24, 0x06	; 6
 17e:	80 83       	st	Z, r24
 180:	29 c0       	rjmp	.+82     	; 0x1d4 <__vector_21+0xae>
	}
	else if (currentADC == 6)
 182:	96 30       	cpi	r25, 0x06	; 6
 184:	a9 f4       	brne	.+42     	; 0x1b0 <__vector_21+0x8a>
	{
		duty2 = 7 + (temp*(37-7)/255);
 186:	2e e1       	ldi	r18, 0x1E	; 30
 188:	82 9f       	mul	r24, r18
 18a:	c0 01       	movw	r24, r0
 18c:	11 24       	eor	r1, r1
 18e:	6f ef       	ldi	r22, 0xFF	; 255
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__divmodhi4>
 196:	69 5f       	subi	r22, 0xF9	; 249
 198:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <duty2>
		ADMUX = 0;
 19c:	ec e7       	ldi	r30, 0x7C	; 124
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	10 82       	st	Z, r1
		ADMUX |= (1<<REFS0) | (1<<ADLAR);
 1a2:	80 81       	ld	r24, Z
 1a4:	80 66       	ori	r24, 0x60	; 96
 1a6:	80 83       	st	Z, r24
		ADMUX |= (1 << MUX0) | (1<<MUX2); 
 1a8:	80 81       	ld	r24, Z
 1aa:	85 60       	ori	r24, 0x05	; 5
 1ac:	80 83       	st	Z, r24
 1ae:	12 c0       	rjmp	.+36     	; 0x1d4 <__vector_21+0xae>
	}
	else if (currentADC == 5)
 1b0:	95 30       	cpi	r25, 0x05	; 5
 1b2:	81 f4       	brne	.+32     	; 0x1d4 <__vector_21+0xae>
	{
		manual = ADCH;
 1b4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <manual+0x1>
 1be:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <manual>
		ADMUX = 0;
 1c2:	ec e7       	ldi	r30, 0x7C	; 124
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	10 82       	st	Z, r1
		ADMUX |= (1<<REFS0) | (1<<ADLAR);
 1c8:	80 81       	ld	r24, Z
 1ca:	80 66       	ori	r24, 0x60	; 96
 1cc:	80 83       	st	Z, r24
		ADMUX |= (1 << MUX0) |  (1 << MUX1) | (1<<MUX2);
 1ce:	80 81       	ld	r24, Z
 1d0:	87 60       	ori	r24, 0x07	; 7
 1d2:	80 83       	st	Z, r24
	}
	ADCSRA |= (1<<ADSC);
 1d4:	ea e7       	ldi	r30, 0x7A	; 122
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	80 64       	ori	r24, 0x40	; 64
 1dc:	80 83       	st	Z, r24
}
 1de:	ff 91       	pop	r31
 1e0:	ef 91       	pop	r30
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	7f 91       	pop	r23
 1ec:	6f 91       	pop	r22
 1ee:	5f 91       	pop	r21
 1f0:	2f 91       	pop	r18
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	2f 93       	push	r18
 208:	3f 93       	push	r19
 20a:	8f 93       	push	r24
 20c:	9f 93       	push	r25
	if (mcount < manual )
 20e:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <mcount>
 212:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <mcount+0x1>
 216:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <manual>
 21a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <manual+0x1>
 21e:	28 17       	cp	r18, r24
 220:	39 07       	cpc	r19, r25
 222:	20 f4       	brcc	.+8      	; 0x22c <__vector_16+0x30>
	{
		PORTB |= (1<<PORTB5);
 224:	85 b1       	in	r24, 0x05	; 5
 226:	80 62       	ori	r24, 0x20	; 32
 228:	85 b9       	out	0x05, r24	; 5
 22a:	03 c0       	rjmp	.+6      	; 0x232 <__vector_16+0x36>
	}
	else
	{
		PORTB &= ~(1<<PORTB5);
 22c:	85 b1       	in	r24, 0x05	; 5
 22e:	8f 7d       	andi	r24, 0xDF	; 223
 230:	85 b9       	out	0x05, r24	; 5
	}
	mcount++;
 232:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <mcount>
 236:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <mcount+0x1>
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <mcount+0x1>
 240:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <mcount>
	if (mcount > 255)
 244:	8f 3f       	cpi	r24, 0xFF	; 255
 246:	91 05       	cpc	r25, r1
 248:	29 f0       	breq	.+10     	; 0x254 <__vector_16+0x58>
 24a:	20 f0       	brcs	.+8      	; 0x254 <__vector_16+0x58>
	{
		mcount = 0; 
 24c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <mcount+0x1>
 250:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <mcount>
	}
 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	3f 91       	pop	r19
 25a:	2f 91       	pop	r18
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <PWM1A>:
 *  Author: Ervin Gomez 231226
 */ 
#include "PWMTimer1.h"
void PWM1A(uint8_t invertido, uint16_t presc)
{
	DDRB |= (1 << DDB1); // OC1A como salida
 266:	94 b1       	in	r25, 0x04	; 4
 268:	92 60       	ori	r25, 0x02	; 2
 26a:	94 b9       	out	0x04, r25	; 4

	
	TCCR1A &= ~((1<<COM1A1) | (1<<COM1A0));
 26c:	e0 e8       	ldi	r30, 0x80	; 128
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	90 81       	ld	r25, Z
 272:	9f 73       	andi	r25, 0x3F	; 63
 274:	90 83       	st	Z, r25

	if (invertido == invt)
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	21 f4       	brne	.+8      	; 0x282 <PWM1A+0x1c>
	{
		TCCR1A |= (1 << COM1A1) | (1 << COM1A0); // modo invertido
 27a:	80 81       	ld	r24, Z
 27c:	80 6c       	ori	r24, 0xC0	; 192
 27e:	80 83       	st	Z, r24
 280:	05 c0       	rjmp	.+10     	; 0x28c <PWM1A+0x26>
	}
	else
	{
		TCCR1A |= (1 << COM1A1); // modo no invertido
 282:	e0 e8       	ldi	r30, 0x80	; 128
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	80 68       	ori	r24, 0x80	; 128
 28a:	80 83       	st	Z, r24
	}

	TCCR1A |= (1 << WGM11);
 28c:	e0 e8       	ldi	r30, 0x80	; 128
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	82 60       	ori	r24, 0x02	; 2
 294:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12);
 296:	e1 e8       	ldi	r30, 0x81	; 129
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	88 61       	ori	r24, 0x18	; 24
 29e:	80 83       	st	Z, r24

	ICR1 = 312;//19999;
 2a0:	88 e3       	ldi	r24, 0x38	; 56
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 2a8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>

	switch (presc)
 2ac:	60 34       	cpi	r22, 0x40	; 64
 2ae:	71 05       	cpc	r23, r1
 2b0:	e1 f0       	breq	.+56     	; 0x2ea <PWM1A+0x84>
 2b2:	38 f4       	brcc	.+14     	; 0x2c2 <PWM1A+0x5c>
 2b4:	61 30       	cpi	r22, 0x01	; 1
 2b6:	71 05       	cpc	r23, r1
 2b8:	61 f0       	breq	.+24     	; 0x2d2 <PWM1A+0x6c>
 2ba:	68 30       	cpi	r22, 0x08	; 8
 2bc:	71 05       	cpc	r23, r1
 2be:	79 f0       	breq	.+30     	; 0x2de <PWM1A+0x78>
 2c0:	26 c0       	rjmp	.+76     	; 0x30e <PWM1A+0xa8>
 2c2:	61 15       	cp	r22, r1
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	78 07       	cpc	r23, r24
 2c8:	b1 f0       	breq	.+44     	; 0x2f6 <PWM1A+0x90>
 2ca:	61 15       	cp	r22, r1
 2cc:	74 40       	sbci	r23, 0x04	; 4
 2ce:	c9 f0       	breq	.+50     	; 0x302 <PWM1A+0x9c>
 2d0:	1e c0       	rjmp	.+60     	; 0x30e <PWM1A+0xa8>
	{
		case 1:
			TCCR1B |= (1 << CS10);
 2d2:	e1 e8       	ldi	r30, 0x81	; 129
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	81 60       	ori	r24, 0x01	; 1
 2da:	80 83       	st	Z, r24
			break;
 2dc:	08 95       	ret
		case 8:
			TCCR1B |= (1 << CS11);
 2de:	e1 e8       	ldi	r30, 0x81	; 129
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	82 60       	ori	r24, 0x02	; 2
 2e6:	80 83       	st	Z, r24
			break;
 2e8:	08 95       	ret
		case 64:
			TCCR1B |= (1 << CS11) | (1 << CS10);
 2ea:	e1 e8       	ldi	r30, 0x81	; 129
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	83 60       	ori	r24, 0x03	; 3
 2f2:	80 83       	st	Z, r24
			break;
 2f4:	08 95       	ret
		case 256:
			TCCR1B |= (1 << CS12);
 2f6:	e1 e8       	ldi	r30, 0x81	; 129
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	84 60       	ori	r24, 0x04	; 4
 2fe:	80 83       	st	Z, r24
			break;
 300:	08 95       	ret
		case 1024:
			TCCR1B |= (1 << CS12) | (1 << CS10);
 302:	e1 e8       	ldi	r30, 0x81	; 129
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	85 60       	ori	r24, 0x05	; 5
 30a:	80 83       	st	Z, r24
			break;
 30c:	08 95       	ret
		default:
			TCCR1B |= (1 << CS11); // por defecto prescaler 8
 30e:	e1 e8       	ldi	r30, 0x81	; 129
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	82 60       	ori	r24, 0x02	; 2
 316:	80 83       	st	Z, r24
 318:	08 95       	ret

0000031a <updateDutyCycle1>:
			break;
	}
}
void updateDutyCycle1(uint16_t duty)
{
	OCR1A = duty;
 31a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 31e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 322:	08 95       	ret

00000324 <PWM2A>:
 */ 

#include "PWMTimer2.h"
void PWM2A(uint8_t invertido2, uint16_t presc2)
{
	DDRB |=(1<< DDB3);
 324:	94 b1       	in	r25, 0x04	; 4
 326:	98 60       	ori	r25, 0x08	; 8
 328:	94 b9       	out	0x04, r25	; 4

	TCCR2A &= ~((1<<COM2A1) | (1<<COM2A0));
 32a:	e0 eb       	ldi	r30, 0xB0	; 176
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	90 81       	ld	r25, Z
 330:	9f 73       	andi	r25, 0x3F	; 63
 332:	90 83       	st	Z, r25
	if (invertido2 == invt2)
 334:	81 30       	cpi	r24, 0x01	; 1
 336:	21 f4       	brne	.+8      	; 0x340 <PWM2A+0x1c>
	{
		TCCR2A |=(1<<COM2A1) | (1<<COM2A0); //modo invertido
 338:	80 81       	ld	r24, Z
 33a:	80 6c       	ori	r24, 0xC0	; 192
 33c:	80 83       	st	Z, r24
 33e:	05 c0       	rjmp	.+10     	; 0x34a <PWM2A+0x26>
	}
	else
	{
		TCCR2A |=(1<<COM2A1); //modo no invertido
 340:	e0 eb       	ldi	r30, 0xB0	; 176
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	80 68       	ori	r24, 0x80	; 128
 348:	80 83       	st	Z, r24
	}
	//TCCR2B |= (1<< WGM22);
	TCCR2A |= (1<< WGM21) | (1<< WGM20); //Setear el modo fast
 34a:	e0 eb       	ldi	r30, 0xB0	; 176
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	83 60       	ori	r24, 0x03	; 3
 352:	80 83       	st	Z, r24

	TCCR2B &= ~(1<<CS22) | (1<<CS21) | (1<<CS20);
 354:	e1 eb       	ldi	r30, 0xB1	; 177
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	8b 7f       	andi	r24, 0xFB	; 251
 35c:	80 83       	st	Z, r24
	switch(presc2){
 35e:	60 34       	cpi	r22, 0x40	; 64
 360:	71 05       	cpc	r23, r1
 362:	49 f1       	breq	.+82     	; 0x3b6 <PWM2A+0x92>
 364:	50 f4       	brcc	.+20     	; 0x37a <PWM2A+0x56>
 366:	68 30       	cpi	r22, 0x08	; 8
 368:	71 05       	cpc	r23, r1
 36a:	c9 f0       	breq	.+50     	; 0x39e <PWM2A+0x7a>
 36c:	60 32       	cpi	r22, 0x20	; 32
 36e:	71 05       	cpc	r23, r1
 370:	e1 f0       	breq	.+56     	; 0x3aa <PWM2A+0x86>
 372:	61 30       	cpi	r22, 0x01	; 1
 374:	71 05       	cpc	r23, r1
 376:	b9 f5       	brne	.+110    	; 0x3e6 <PWM2A+0xc2>
 378:	0c c0       	rjmp	.+24     	; 0x392 <PWM2A+0x6e>
 37a:	61 15       	cp	r22, r1
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	78 07       	cpc	r23, r24
 380:	31 f1       	breq	.+76     	; 0x3ce <PWM2A+0xaa>
 382:	61 15       	cp	r22, r1
 384:	84 e0       	ldi	r24, 0x04	; 4
 386:	78 07       	cpc	r23, r24
 388:	41 f1       	breq	.+80     	; 0x3da <PWM2A+0xb6>
 38a:	60 38       	cpi	r22, 0x80	; 128
 38c:	71 05       	cpc	r23, r1
 38e:	59 f5       	brne	.+86     	; 0x3e6 <PWM2A+0xc2>
 390:	18 c0       	rjmp	.+48     	; 0x3c2 <PWM2A+0x9e>
		case 1:
		TCCR2B |= (1<<CS20);
 392:	e1 eb       	ldi	r30, 0xB1	; 177
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	80 81       	ld	r24, Z
 398:	81 60       	ori	r24, 0x01	; 1
 39a:	80 83       	st	Z, r24
		break;
 39c:	08 95       	ret
		case 8:
		TCCR2B |= (1<<CS21);
 39e:	e1 eb       	ldi	r30, 0xB1	; 177
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	82 60       	ori	r24, 0x02	; 2
 3a6:	80 83       	st	Z, r24
		break;
 3a8:	08 95       	ret
		case 32:
		TCCR2B |= (1<<CS21) | (1<<CS20);
 3aa:	e1 eb       	ldi	r30, 0xB1	; 177
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	83 60       	ori	r24, 0x03	; 3
 3b2:	80 83       	st	Z, r24
		break;
 3b4:	08 95       	ret
		case 64:
		TCCR2B |= (1<<CS22);
 3b6:	e1 eb       	ldi	r30, 0xB1	; 177
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	84 60       	ori	r24, 0x04	; 4
 3be:	80 83       	st	Z, r24
		break;
 3c0:	08 95       	ret
		case 128:
		TCCR2B |= (1<<CS22) | (1<<CS20);
 3c2:	e1 eb       	ldi	r30, 0xB1	; 177
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	85 60       	ori	r24, 0x05	; 5
 3ca:	80 83       	st	Z, r24
		break;
 3cc:	08 95       	ret
		case 256:
		TCCR2B |= (1<<CS22) | (1<<CS21);
 3ce:	e1 eb       	ldi	r30, 0xB1	; 177
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	86 60       	ori	r24, 0x06	; 6
 3d6:	80 83       	st	Z, r24
		break;
 3d8:	08 95       	ret
		case 1024:
		TCCR2B |= (1<<CS22) | (1<<CS21) | (1<<CS20);
 3da:	e1 eb       	ldi	r30, 0xB1	; 177
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	87 60       	ori	r24, 0x07	; 7
 3e2:	80 83       	st	Z, r24
		break;
 3e4:	08 95       	ret
		default:
		TCCR2B |= (1<<CS22) | (1<<CS21); //256 de prescaler
 3e6:	e1 eb       	ldi	r30, 0xB1	; 177
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	86 60       	ori	r24, 0x06	; 6
 3ee:	80 83       	st	Z, r24
 3f0:	08 95       	ret

000003f2 <updateDutyCycle2>:
		break;
	}
}
void updateDutyCycle2(uint8_t duty2)
{
	OCR2A = duty2;
 3f2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 3f6:	08 95       	ret

000003f8 <__divmodhi4>:
 3f8:	97 fb       	bst	r25, 7
 3fa:	07 2e       	mov	r0, r23
 3fc:	16 f4       	brtc	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fe:	00 94       	com	r0
 400:	07 d0       	rcall	.+14     	; 0x410 <__divmodhi4_neg1>
 402:	77 fd       	sbrc	r23, 7
 404:	09 d0       	rcall	.+18     	; 0x418 <__divmodhi4_neg2>
 406:	0e 94 10 02 	call	0x420	; 0x420 <__udivmodhi4>
 40a:	07 fc       	sbrc	r0, 7
 40c:	05 d0       	rcall	.+10     	; 0x418 <__divmodhi4_neg2>
 40e:	3e f4       	brtc	.+14     	; 0x41e <__divmodhi4_exit>

00000410 <__divmodhi4_neg1>:
 410:	90 95       	com	r25
 412:	81 95       	neg	r24
 414:	9f 4f       	sbci	r25, 0xFF	; 255
 416:	08 95       	ret

00000418 <__divmodhi4_neg2>:
 418:	70 95       	com	r23
 41a:	61 95       	neg	r22
 41c:	7f 4f       	sbci	r23, 0xFF	; 255

0000041e <__divmodhi4_exit>:
 41e:	08 95       	ret

00000420 <__udivmodhi4>:
 420:	aa 1b       	sub	r26, r26
 422:	bb 1b       	sub	r27, r27
 424:	51 e1       	ldi	r21, 0x11	; 17
 426:	07 c0       	rjmp	.+14     	; 0x436 <__udivmodhi4_ep>

00000428 <__udivmodhi4_loop>:
 428:	aa 1f       	adc	r26, r26
 42a:	bb 1f       	adc	r27, r27
 42c:	a6 17       	cp	r26, r22
 42e:	b7 07       	cpc	r27, r23
 430:	10 f0       	brcs	.+4      	; 0x436 <__udivmodhi4_ep>
 432:	a6 1b       	sub	r26, r22
 434:	b7 0b       	sbc	r27, r23

00000436 <__udivmodhi4_ep>:
 436:	88 1f       	adc	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	5a 95       	dec	r21
 43c:	a9 f7       	brne	.-22     	; 0x428 <__udivmodhi4_loop>
 43e:	80 95       	com	r24
 440:	90 95       	com	r25
 442:	bc 01       	movw	r22, r24
 444:	cd 01       	movw	r24, r26
 446:	08 95       	ret

00000448 <_exit>:
 448:	f8 94       	cli

0000044a <__stop_program>:
 44a:	ff cf       	rjmp	.-2      	; 0x44a <__stop_program>
